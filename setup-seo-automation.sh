#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SEO –ø—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
# –ê–≤—Ç–æ—Ä: Digital Craft Team
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "=================================="
    echo "üöÄ –ù–ê–°–¢–†–û–ô–ö–ê SEO –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò"
    echo "=================================="
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! command -v node &> /dev/null; then
        print_warning "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Node.js
        print_error "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é —Å https://nodejs.org"
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        print_error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ npm –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
create_structure() {
    print_info "–°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫..."
    
    mkdir -p netlify/functions
    mkdir -p .github/workflows
    
    print_success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if [ -f "package.json" ]; then
        npm install
        print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
check_git_repo() {
    print_info "–ü—Ä–æ–≤–µ—Ä—è—é Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
    
    if [ ! -d ".git" ]; then
        print_error "–≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Git –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º remote
    if ! git remote get-url origin &> /dev/null; then
        print_warning "Remote origin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ remote –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        print_info "–ö–æ–º–∞–Ω–¥–∞: git remote add origin <URL_–í–ê–®–ï–ì–û_–†–ï–ü–û–ó–ò–¢–û–†–ò–Ø>"
        exit 1
    fi
    
    print_success "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ .gitignore
create_gitignore() {
    print_info "–°–æ–∑–¥–∞—é .gitignore..."
    
    if [ ! -f ".gitignore" ]; then
        cat > .gitignore << EOF
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Firebase
.firebase/
firebase-debug.log
firestore-debug.log
ui-debug.log

# Netlify
.netlify/

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
EOF
        print_success ".gitignore —Å–æ–∑–¥–∞–Ω"
    else
        print_info ".gitignore —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
check_files() {
    print_info "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    local missing_files=()
    
    if [ ! -f "netlify/functions/renderer.js" ]; then
        missing_files+=("netlify/functions/renderer.js")
    fi
    
    if [ ! -f "netlify.toml" ]; then
        missing_files+=("netlify.toml")
    fi
    
    if [ ! -f "package.json" ]; then
        missing_files+=("package.json")
    fi
    
    if [ ! -f ".github/workflows/auto-deploy-seo.yml" ]; then
        missing_files+=(".github/workflows/auto-deploy-seo.yml")
    fi
    
    if [ ! -f ".github/workflows/quick-seo-update.yml" ]; then
        missing_files+=(".github/workflows/quick-seo-update.yml")
    fi
    
    if [ ${#missing_files[@]} -eq 0 ]; then
        print_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
    else
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:"
        for file in "${missing_files[@]}"; do
            print_error "  - $file"
        done
        exit 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks
setup_git_hooks() {
    print_info "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Git hooks..."
    
    # –°–æ–∑–¥–∞–µ–º pre-commit hook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    mkdir -p .git/hooks
    
    cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash

echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é SEO —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ ! -f "netlify/functions/renderer.js" ]; then
    echo "‚ùå netlify/functions/renderer.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f "netlify.toml" ]; then
    echo "‚ùå netlify.toml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

if [ ! -f "package.json" ]; then
    echo "‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo "‚úÖ SEO —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
EOF
    
    chmod +x .git/hooks/pre-commit
    print_success "Git hooks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_check() {
    print_info "–í—ã–ø–æ–ª–Ω—è—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if [ -d "netlify/functions" ] && [ -f "netlify/functions/renderer.js" ]; then
        print_success "‚úÖ Netlify Functions –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        print_error "‚ùå Netlify Functions –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub Actions
    if [ -d ".github/workflows" ] && [ -f ".github/workflows/auto-deploy-seo.yml" ]; then
        print_success "‚úÖ GitHub Actions –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        print_error "‚ùå GitHub Actions –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -d "node_modules" ] && [ -f "package-lock.json" ]; then
        print_success "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    print_success "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    print_info "–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É SEO —Å–∏—Å—Ç–µ–º—ã..."
    
    check_dependencies
    create_structure
    check_git_repo
    create_gitignore
    check_files
    install_dependencies
    setup_git_hooks
    final_check
    
    echo ""
    print_success "üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
    echo ""
    print_info "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Firebase Service Account (—Å–º. FIREBASE-SETUP.md)"
    echo "  2. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é FIREBASE_SERVICE_ACCOUNT_JSON –≤ Netlify"
    echo "  3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub:"
    echo "     git add ."
    echo "     git commit -m 'üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∞ SEO —Å–∏—Å—Ç–µ–º–∞'"
    echo "     git push origin main"
    echo ""
    print_info "üì± –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions"
    print_info "üåê –°–∞–π—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
    
    echo ""
    print_success "üöÄ SEO —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi